import os

from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col
from pyspark.sql.types import StringType, StructType, StructField
from pyspark.sql.functions import udf

print("Starting Spark session...")

spark = SparkSession.builder \
    .appName("MalwareLuaScriptProcessing") \
    .master("spark://localhost:7077") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2") \
    .getOrCreate()

print("Spark session started. Reading from Kafka...")

# Define schema for incoming Kafka messages
schema = StructType([
    StructField("key", StringType(), True),
    StructField("value", StringType(), True)
])

# Create a streaming DataFrame representing data from Kafka
df = spark.readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:29092") \
    .option("subscribe", "lua_scripts") \
    .option("startingOffsets", "earliest") \
    .load() \
    .selectExpr("CAST(key AS STRING)", "CAST(value AS STRING)")

print("DataFrame created. Applying UDF...")

# Process each Lua script
def detect_malware(lua_script):
    suspicious_keywords = ['while true do', 'os.execute', 'io.popen']
    print('--------------------------')
    for keyword in suspicious_keywords:
        if keyword in lua_script:
            return 'malicious'
    return 'safe'

# Register "user defined function" (udf) for malware detection
detect_malware_udf = udf(detect_malware, StringType())

# Apply the udf to each message
processed_df = df.withColumn("result", detect_malware_udf(col("value")))

# Start the streaming query and print results to console for debugging
query = processed_df \
    .writeStream \
    .outputMode("append") \
    .format("console") \
    .start()

print("Query started. Awaiting termination...")
query.awaitTermination()
