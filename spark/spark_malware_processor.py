from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import StringType

# Set the Kafka broker address (use localhost because we're running everything locally)
kafka_brokers = "localhost:29092"


# Create a Spark session
def init_spark():
    spark_session = (SparkSession.builder
                     .appName("KafkaToKafka")
                     .master("local[*]")
                     .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.2")
                     .config("spark.sql.adaptive.enabled", "false")
                     .getOrCreate())
    return spark_session

# Read from Kafka topic 'lua_scripts'
def read_script_from_kafka(spark_session):
    df = (spark_session.readStream
          .format("kafka")
          .option("kafka.bootstrap.servers", kafka_brokers)
          .option("subscribe", "lua_scripts")
          .option("startingOffsets", "earliest")  # You can change this to 'latest' if needed
          .load())
    return df

# Define the malware detection logic as a Python function
def detect_malware_in_script(script_content: str) -> str:
    # TODO: Supplement with ML model here
    if 'malware' in script_content.lower():  # Example malware detection logic
        return 'detected'
    else:
        return 'clean'

# Write the result to another Kafka topic 'malware_results'
def write_analyzed_results_to_kafka():
    query = (processed_df
             .selectExpr("CAST(key AS STRING) AS key", "CAST(malware_result AS STRING) AS value")
             .writeStream
             .format("kafka")
             .option("kafka.bootstrap.servers", kafka_brokers)
             .option("topic", "malware_results")
             .option("checkpointLocation", "/tmp/spark_checkpoint")  # Set a checkpoint location
             .start())
    # Wait for the termination of the stream
    query.awaitTermination()

spark_session = init_spark()

df = read_script_from_kafka(spark_session)

# Cast the key and value from Kafka as strings (assuming Lua scripts are in JSON format)
df = df.selectExpr("CAST(key AS STRING)", "CAST(value AS STRING)")

# Register the function as a UDF
detect_malware_udf = udf(detect_malware_in_script, StringType())

# Apply the UDF to the DataFrame
processed_df = df.withColumn("malware_result", detect_malware_udf(df["value"]))

write_analyzed_results_to_kafka()

